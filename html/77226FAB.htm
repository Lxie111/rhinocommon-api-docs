<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Intersection.LineCircle Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="LineCircle method" /><meta name="System.Keywords" content="Intersection.LineCircle method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Intersect.Intersection.LineCircle" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Intersect.Intersection.LineCircle(Rhino.Geometry.Line,Rhino.Geometry.Circle,System.Double@,Rhino.Geometry.Point3d@,System.Double@,Rhino.Geometry.Point3d@)" /><meta name="Description" content="Intersects a line with a circle using exact calculations." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry.Intersect" /><meta name="file" content="77226FAB" /><meta name="guid" content="77226FAB" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="A7FBC69C.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="8B841011.htm" title="Rhino.Geometry.Intersect" tocid="8B841011">Rhino.Geometry.Intersect</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6387F80E.htm" title="Intersection Class" tocid="6387F80E">Intersection Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="CA26C0BA.htm" title="Intersection Methods" tocid="CA26C0BA">Intersection Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="35757663.htm" title="BrepBrep Method " tocid="35757663">BrepBrep Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7ABA58D6.htm" title="BrepPlane Method " tocid="7ABA58D6">BrepPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6008E98B.htm" title="BrepSurface Method " tocid="6008E98B">BrepSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="EAAC8445.htm" title="CurveBrep Method " tocid="EAAC8445">CurveBrep Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8E6DB050.htm" title="CurveBrepFace Method " tocid="8E6DB050">CurveBrepFace Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="878F02C7.htm" title="CurveCurve Method " tocid="878F02C7">CurveCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="C786D206.htm" title="CurvePlane Method " tocid="C786D206">CurvePlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="A3BFF41E.htm" title="CurveSelf Method " tocid="A3BFF41E">CurveSelf Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="EDC4A49C.htm" title="CurveSurface Method " tocid="EDC4A49C">CurveSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="9E253CD.htm" title="LineBox Method " tocid="9E253CD">LineBox Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="77226FAB.htm" title="LineCircle Method " tocid="77226FAB">LineCircle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8AD8009F.htm" title="LineCylinder Method " tocid="8AD8009F">LineCylinder Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="341BB52.htm" title="LineLine Method " tocid="341BB52">LineLine Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="69F20783.htm" title="LinePlane Method " tocid="69F20783">LinePlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="48D375FA.htm" title="LineSphere Method " tocid="48D375FA">LineSphere Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="52FE0172.htm" title="MeshLine Method " tocid="52FE0172">MeshLine Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8D14EE85.htm" title="MeshMeshAccurate Method " tocid="8D14EE85">MeshMeshAccurate Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="B949ACCF.htm" title="MeshMeshFast Method " tocid="B949ACCF">MeshMeshFast Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6D477337.htm" title="MeshPlane Method " tocid="6D477337">MeshPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="EC7911F8.htm" title="MeshPolyline Method " tocid="EC7911F8">MeshPolyline Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="78BAE6F7.htm" title="MeshRay Method " tocid="78BAE6F7">MeshRay Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="11623FB.htm" title="PlaneCircle Method " tocid="11623FB">PlaneCircle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="DF488B4B.htm" title="PlanePlane Method " tocid="DF488B4B">PlanePlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="D99070E9.htm" title="PlanePlanePlane Method " tocid="D99070E9">PlanePlanePlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="E84031D8.htm" title="PlaneSphere Method " tocid="E84031D8">PlaneSphere Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4478E1AE.htm" title="ProjectPointsToBreps Method " tocid="4478E1AE">ProjectPointsToBreps Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="92ADE341.htm" title="ProjectPointsToBrepsEx Method " tocid="92ADE341">ProjectPointsToBrepsEx Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="D1A8E39B.htm" title="ProjectPointsToMeshes Method " tocid="D1A8E39B">ProjectPointsToMeshes Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2FA2E99C.htm" title="ProjectPointsToMeshesEx Method " tocid="2FA2E99C">ProjectPointsToMeshesEx Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="67D145EA.htm" title="RayShoot Method " tocid="67D145EA">RayShoot Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="AA9CD443.htm" title="SphereSphere Method " tocid="AA9CD443">SphereSphere Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="B699528F.htm" title="SurfaceSurface Method " tocid="B699528F">SurfaceSurface Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Intersection<span id="LST4D407D5A_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_0?cpp=::|nu=.");</script>LineCircle Method </td></tr></table><span class="introStyle">Rhino for Mac 5.1</span><div class="summary">
            Intersects a line with a circle using exact calculations.
            </div><p> </p><strong>Namespace:</strong> <a href="8B841011.htm">Rhino.Geometry.Intersect</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.50000.0 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">LineCircleIntersection</span> <span class="identifier">LineCircle</span>(
	<span class="identifier">Line</span> <span class="parameter">line</span>,
	<span class="identifier">Circle</span> <span class="parameter">circle</span>,
	<span class="keyword">out</span> <span class="identifier">double</span> <span class="parameter">t1</span>,
	<span class="keyword">out</span> <span class="identifier">Point3d</span> <span class="parameter">point1</span>,
	<span class="keyword">out</span> <span class="identifier">double</span> <span class="parameter">t2</span>,
	<span class="keyword">out</span> <span class="identifier">Point3d</span> <span class="parameter">point2</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">LineCircle</span> ( 
	<span class="parameter">line</span> <span class="keyword">As</span> <span class="identifier">Line</span>,
	<span class="parameter">circle</span> <span class="keyword">As</span> <span class="identifier">Circle</span>,
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">t1</span> <span class="keyword">As</span> <span class="identifier">Double</span>,
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">point1</span> <span class="keyword">As</span> <span class="identifier">Point3d</span>,
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">t2</span> <span class="keyword">As</span> <span class="identifier">Double</span>,
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">point2</span> <span class="keyword">As</span> <span class="identifier">Point3d</span>
) <span class="keyword">As</span> <span class="identifier">LineCircleIntersection</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">line</span></dt><dd>Type: <a href="F0EB2028.htm">Rhino.Geometry<span id="LST4D407D5A_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Line</a><br />Line for intersection.</dd><dt><span class="parameter">circle</span></dt><dd>Type: <a href="709355C6.htm">Rhino.Geometry<span id="LST4D407D5A_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Circle</a><br />Circle for intersection.</dd><dt><span class="parameter">t1</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">System<span id="LST4D407D5A_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><span id="LST4D407D5A_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_4?cpp=%");</script><br />Parameter on line for first intersection.</dd><dt><span class="parameter">point1</span></dt><dd>Type: <a href="68F1A42D.htm">Rhino.Geometry<span id="LST4D407D5A_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Point3d</a><span id="LST4D407D5A_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_6?cpp=%");</script><br />Point on circle closest to first intersection.</dd><dt><span class="parameter">t2</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">System<span id="LST4D407D5A_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_7?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><span id="LST4D407D5A_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_8?cpp=%");</script><br />Parameter on line for second intersection.</dd><dt><span class="parameter">point2</span></dt><dd>Type: <a href="68F1A42D.htm">Rhino.Geometry<span id="LST4D407D5A_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_9?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Point3d</a><span id="LST4D407D5A_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4D407D5A_10?cpp=%");</script><br />Point on circle closest to second intersection.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="B923C848.htm">LineCircleIntersection</a><br />
            If <a href="B923C848.htm">Single</a> is returned, only t1 and point1 will have valid values.
            If <a href="B923C848.htm">Multiple</a> is returned, t2 and point2 will also be filled out.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.Geometry.Intersect;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> IntersectLineCircleCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csIntersectLineCircle"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      Circle circle;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetCircle(<span class="highlight-keyword">out</span> circle);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      doc.Objects.AddCircle(circle);
      doc.Views.Redraw();

      Line line;
      rc = RhinoGet.GetLine(<span class="highlight-keyword">out</span> line);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      doc.Objects.AddLine(line);
      doc.Views.Redraw();

      <span class="highlight-keyword">double</span> t1, t2;
      Point3d point1, point2;
      <span class="highlight-keyword">var</span> line_circle_intersect = Intersection.LineCircle(line, circle, <span class="highlight-keyword">out</span> t1, <span class="highlight-keyword">out</span> point1, <span class="highlight-keyword">out</span> t2, <span class="highlight-keyword">out</span> point2);
      <span class="highlight-keyword">string</span> msg = <span class="highlight-literal">""</span>;
      <span class="highlight-keyword">switch</span> (line_circle_intersect) {
        <span class="highlight-keyword">case</span> LineCircleIntersection.None:
          msg = <span class="highlight-literal">"line does not intersect circle"</span>;
          <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> LineCircleIntersection.Single:
          msg = <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"line intersects circle at point ({0})"</span>, point1);
          doc.Objects.AddPoint(point1);
          <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> LineCircleIntersection.Multiple:
          msg = <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"line intersects circle at points ({0}) and ({1})"</span>,
            point1, point2);
          doc.Objects.AddPoint(point1);
          doc.Objects.AddPoint(point2);
          <span class="highlight-keyword">break</span>;
      }
      RhinoApp.WriteLine(msg);
      doc.Views.Redraw();
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.Geometry.Intersect

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> IntersectLineCircleCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbIntersectLineCircle"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> circle <span class="highlight-keyword">As</span> Circle
      <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetCircle(circle)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      doc.Objects.AddCircle(circle)
      doc.Views.Redraw()

      <span class="highlight-keyword">Dim</span> line <span class="highlight-keyword">As</span> Line
      rc = Rhino.Input.RhinoGet.GetLine(line)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      doc.Objects.AddLine(line)
      doc.Views.Redraw()

      <span class="highlight-keyword">Dim</span> t1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, t2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> point1 <span class="highlight-keyword">As</span> Point3d, point2 <span class="highlight-keyword">As</span> Point3d
      <span class="highlight-keyword">Dim</span> lineCircleIntersect = Intersection.LineCircle(line, circle, t1, point1, t2, point2)
      <span class="highlight-keyword">Dim</span> msg <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">""</span>
      <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> lineCircleIntersect
        <span class="highlight-keyword">Case</span> LineCircleIntersection.None
          msg = <span class="highlight-literal">"line does not intersect circle"</span>
          <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> LineCircleIntersection.[<span class="highlight-keyword">Single</span>]
          msg = [<span class="highlight-keyword">String</span>].Format(<span class="highlight-literal">"line intersects circle at point ({0},{1},{2})"</span>, point1.X, point1.Y, point1.Z)
          doc.Objects.AddPoint(point1)
          <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> LineCircleIntersection.Multiple
          msg = [<span class="highlight-keyword">String</span>].Format(<span class="highlight-literal">"line intersects circle at points ({0},{1},{2}) and ({3},{4},{5})"</span>, point1.X, point1.Y, point1.Z, point2.X, point2.Y, _
            point2.Z)
          doc.Objects.AddPoint(point1)
          doc.Objects.AddPoint(point2)
          <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>
      RhinoApp.WriteLine(msg)
      doc.Views.Redraw()
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc
<span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">from</span> Rhino.Geometry.Intersect <span class="highlight-keyword">import</span> Intersection, LineCircleIntersection

<span class="highlight-keyword">def</span> RunCommand():
  rc, circle = Rhino.Input.RhinoGet.GetCircle()
  <span class="highlight-keyword">if</span> rc != Rhino.Commands.Result.Success:
    <span class="highlight-keyword">return</span> rc
  doc.Objects.AddCircle(circle)
  doc.Views.Redraw()

  rc, line = Rhino.Input.RhinoGet.GetLine()
  <span class="highlight-keyword">if</span> rc != Rhino.Commands.Result.Success:
    <span class="highlight-keyword">return</span> rc
  doc.Objects.AddLine(line)
  doc.Views.Redraw()

  lineCircleIntersect, t1, point1, t2, point2 = Intersection.LineCircle(line, circle)
  message = <span class="highlight-literal">""</span>
  <span class="highlight-keyword">if</span> lineCircleIntersect == LineCircleIntersection.None:
    message = <span class="highlight-literal">"line does not intersect circle"</span>
  <span class="highlight-keyword">elif</span> lineCircleIntersect == LineCircleIntersection.Single:
    message = <span class="highlight-literal">"line intersects circle at point ({0},{1},{2})"</span>.format(point1.X, point1.Y, point1.Z)
    doc.Objects.AddPoint(point1)
  <span class="highlight-keyword">elif</span> lineCircleIntersect == LineCircleIntersection.Multiple:
    message = <span class="highlight-literal">"line intersects circle at points ({0},{1},{2}) and ({3},{4},{5})"</span>.format(
      point1.X, point1.Y, point1.Z, point2.X, point2.Y, point2.Z)
    doc.Objects.AddPoint(point1)
    doc.Objects.AddPoint(point2)

  <span class="highlight-keyword">print</span> message
  doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
    RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="6387F80E.htm">Intersection Class</a></div><div class="seeAlsoStyle"><a href="8B841011.htm">Rhino.Geometry.Intersect Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 4 October 2015 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>