<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Layer.Name Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Name property" /><meta name="System.Keywords" content="Layer.Name property" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Layer.Name" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Layer.get_Name" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Layer.set_Name" /><meta name="Microsoft.Help.Id" content="P:Rhino.DocObjects.Layer.Name" /><meta name="Description" content="Gets or sets the name of this layer." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects" /><meta name="file" content="FBAF3E22" /><meta name="guid" content="FBAF3E22" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="A7FBC69C.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ABAF2FCC.htm" title="Rhino.DocObjects" tocid="ABAF2FCC">Rhino.DocObjects</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="CFDD37CD.htm" title="Layer Class" tocid="CFDD37CD">Layer Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="492B0884.htm" title="Layer Properties" tocid="492B0884">Layer Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="1737BB44.htm" title="Color Property " tocid="1737BB44">Color Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="97A7D515.htm" title="FullPath Property " tocid="97A7D515">FullPath Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="22971084.htm" title="Id Property " tocid="22971084">Id Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="666E0815.htm" title="IgesLevel Property " tocid="666E0815">IgesLevel Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="74C5D20E.htm" title="IsDeleted Property " tocid="74C5D20E">IsDeleted Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="91786CCC.htm" title="IsExpanded Property " tocid="91786CCC">IsExpanded Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="57497B8F.htm" title="IsLocked Property " tocid="57497B8F">IsLocked Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="B0982B2A.htm" title="IsReference Property " tocid="B0982B2A">IsReference Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="A56F0F53.htm" title="IsVisible Property " tocid="A56F0F53">IsVisible Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="C585AC3E.htm" title="LayerIndex Property " tocid="C585AC3E">LayerIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="33B95047.htm" title="LinetypeIndex Property " tocid="33B95047">LinetypeIndex Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="FBAF3E22.htm" title="Name Property " tocid="FBAF3E22">Name Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="90F40085.htm" title="ParentLayerId Property " tocid="90F40085">ParentLayerId Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="F6B3C791.htm" title="PlotColor Property " tocid="F6B3C791">PlotColor Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="DF93164E.htm" title="PlotWeight Property " tocid="DF93164E">PlotWeight Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="FC825CA4.htm" title="RenderMaterialIndex Property " tocid="FC825CA4">RenderMaterialIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="A02CB7D7.htm" title="SortIndex Property " tocid="A02CB7D7">SortIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="DA1B025E.htm" title="UserStringCount Property " tocid="DA1B025E">UserStringCount Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Layer<span id="LSTFBAF3E22_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFBAF3E22_0?cpp=::|nu=.");</script>Name Property </td></tr></table><span class="introStyle">Rhino for Mac 5.1</span><div class="summary">Gets or sets the name of this layer.</div><p> </p><strong>Namespace:</strong> <a href="ABAF2FCC.htm">Rhino.DocObjects</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.50000.0 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">string</span> <span class="identifier">Name</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="identifier">Name</span> <span class="keyword">As</span> <span class="identifier">String</span>
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection">If you are modifying a layer inside a Rhino document,
            you must call CommitChanges for the modifications to take effect.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBCBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBCBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBCBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBCBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino.Commands;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result SelLayer(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// Prompt for a layer name</span>
    <span class="highlight-keyword">string</span> layername = doc.Layers.CurrentLayer.Name;
    Result rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Name of layer to select objects"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> layername);
    <span class="highlight-keyword">if</span> (rc != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> rc;

    <span class="highlight-comment">// Get all of the objects on the layer. If layername is bogus, you will</span>
    <span class="highlight-comment">// just get an empty list back</span>
    Rhino.DocObjects.RhinoObject[] rhobjs = doc.Objects.FindByLayer(layername);
    <span class="highlight-keyword">if</span> (rhobjs == <span class="highlight-keyword">null</span> || rhobjs.Length &lt; <span class="highlight-number">1</span>)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Cancel;

    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; rhobjs.Length; i++)
      rhobjs[i].Select(<span class="highlight-keyword">true</span>);
    doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBCBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> SelLayer(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> rc <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' Prompt for a layer name</span>
    <span class="highlight-keyword">Dim</span> layername <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = doc.Layers.CurrentLayer.Name
    rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Name of layer to select objects"</span>, <span class="highlight-keyword">True</span>, layername)
    <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Return</span> rc

    <span class="highlight-comment">' Get all of the objects on the layer. If layername is bogus, you will</span>
    <span class="highlight-comment">' just get an empty list back</span>
    <span class="highlight-keyword">Dim</span> rhobjs <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject() = doc.Objects.FindByLayer(layername)
    <span class="highlight-keyword">If</span> rhobjs <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> rhobjs.Length &lt; <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Cancel
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> rhobjs.Length - <span class="highlight-number">1</span>
      rhobjs(i).<span class="highlight-keyword">Select</span>(<span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">Next</span>
    doc.Views.Redraw()
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBCBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext
<span class="highlight-keyword">import</span> System.Guid, System.Drawing.Color

<span class="highlight-keyword">def</span> SelLayer():
    <span class="highlight-comment"># Prompt for a layer name</span>
    layername = scriptcontext.doc.Layers.CurrentLayer.Name
    rc, layername = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Name of layer to select objects"</span>, True, layername)
    <span class="highlight-keyword">if</span> rc!=Rhino.Commands.Result.Success: <span class="highlight-keyword">return</span> rc

    <span class="highlight-comment"># Get all of the objects on the layer. If layername is bogus, you will</span>
    <span class="highlight-comment"># just get an empty list back</span>
    rhobjs = scriptcontext.doc.Objects.FindByLayer(layername)
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> rhobjs: Rhino.Commands.Result.Cancel

    <span class="highlight-keyword">for</span> obj <span class="highlight-keyword">in</span> rhobjs: obj.Select(True)
    scriptcontext.doc.Views.Redraw()
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    SelLayer()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACBA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Linq;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> RenameLayerCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csRenameLayer"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">string</span> layer_name = <span class="highlight-literal">""</span>;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetString(<span class="highlight-literal">"Name of layer to rename"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> layer_name);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">if</span> (String.IsNullOrWhiteSpace(layer_name))
        <span class="highlight-keyword">return</span> Result.Nothing;

      <span class="highlight-comment">// because of sublayers it's possible that more than one layer has the same name</span>
      <span class="highlight-comment">// so simply calling doc.Layers.Find(layerName) isn't good enough.  If "layerName" returns</span>
      <span class="highlight-comment">// more than one layer then present them to the user and let him decide.</span>
      <span class="highlight-keyword">var</span> matching_layers = (<span class="highlight-keyword">from</span> layer <span class="highlight-keyword">in</span> doc.Layers
                             <span class="highlight-keyword">where</span> layer.Name == layer_name
                             <span class="highlight-keyword">select</span> layer).ToList&lt;Layer&gt;();

      Layer layer_to_rename = <span class="highlight-keyword">null</span>;
      <span class="highlight-keyword">if</span> (matching_layers.Count == <span class="highlight-number">0</span>)
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Layer \"{0}\" does not exist."</span>, layer_name);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (matching_layers.Count == <span class="highlight-number">1</span>)
      {
        layer_to_rename = matching_layers[<span class="highlight-number">0</span>];
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (matching_layers.Count &gt; <span class="highlight-number">1</span>)
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; matching_layers.Count; i++)
        {
          RhinoApp.WriteLine(<span class="highlight-literal">"({0}) {1}"</span>, i<span class="highlight-number">+1</span>, matching_layers[i].FullPath.Replace(<span class="highlight-literal">"::"</span>, <span class="highlight-literal">"-&gt;"</span>));
        }
        <span class="highlight-keyword">int</span> selected_layer = <span class="highlight-number">-1</span>;
        rc = RhinoGet.GetInteger(<span class="highlight-literal">"which layer?"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> selected_layer);
        <span class="highlight-keyword">if</span> (rc != Result.Success)
          <span class="highlight-keyword">return</span> rc;
        <span class="highlight-keyword">if</span> (selected_layer &gt; <span class="highlight-number">0</span> &amp;&amp; selected_layer &lt;= matching_layers.Count)
          layer_to_rename = matching_layers[selected_layer - <span class="highlight-number">1</span>];
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">if</span> (layer_to_rename == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Nothing;

      layer_name = <span class="highlight-literal">""</span>;
      rc = RhinoGet.GetString(<span class="highlight-literal">"New layer name"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> layer_name);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">if</span> (String.IsNullOrWhiteSpace(layer_name))
        <span class="highlight-keyword">return</span> Result.Nothing;

      layer_to_rename.Name = layer_name;
      <span class="highlight-keyword">if</span> (!layer_to_rename.CommitChanges())
        <span class="highlight-keyword">return</span> Result.Failure;
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Input
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> System.Linq

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> RenameLayerCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbRenameLayer"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> layer_name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">""</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetString(<span class="highlight-literal">"Name of layer to rename"</span>, <span class="highlight-keyword">True</span>, layer_name)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> [<span class="highlight-keyword">String</span>].IsNullOrWhiteSpace(layer_name) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' because of sublayers it's possible that more than one layer has the same name</span>
      <span class="highlight-comment">' so simply calling doc.Layers.Find(layerName) isn't good enough.  If "layerName" returns</span>
      <span class="highlight-comment">' more than one layer then present them to the user and let him decide.</span>
      <span class="highlight-keyword">Dim</span> matching_layers = (From layer <span class="highlight-keyword">In</span> doc.Layers Where layer.Name = layer_name <span class="highlight-keyword">Select</span> layer).ToList()

      <span class="highlight-keyword">Dim</span> layer_to_rename <span class="highlight-keyword">As</span> Layer = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">If</span> matching_layers.Count = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Layer "</span><span class="highlight-literal">"{0}"</span><span class="highlight-literal">" does not exist."</span>, layer_name)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">ElseIf</span> matching_layers.Count = <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
        layer_to_rename = matching_layers(<span class="highlight-number">0</span>)
      <span class="highlight-keyword">ElseIf</span> matching_layers.Count &gt; <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> matching_layers.Count - <span class="highlight-number">1</span>
          RhinoApp.WriteLine(<span class="highlight-literal">"({0}) {1}"</span>, i + <span class="highlight-number">1</span>, matching_layers(i).FullPath.Replace(<span class="highlight-literal">"::"</span>, <span class="highlight-literal">"-&gt;"</span>))
        <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">Dim</span> selected_layer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">-1</span>
        rc = RhinoGet.GetInteger(<span class="highlight-literal">"which layer?"</span>, <span class="highlight-keyword">True</span>, selected_layer)
        <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
          <span class="highlight-keyword">Return</span> rc
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">If</span> selected_layer &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">AndAlso</span> selected_layer &lt;= matching_layers.Count <span class="highlight-keyword">Then</span>
          layer_to_rename = matching_layers(selected_layer - <span class="highlight-number">1</span>)
        <span class="highlight-keyword">Else</span>
          <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> layer_to_rename <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      layer_name = <span class="highlight-literal">""</span>
      rc = RhinoGet.GetString(<span class="highlight-literal">"New layer name"</span>, <span class="highlight-keyword">True</span>, layer_name)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> [<span class="highlight-keyword">String</span>].IsNullOrWhiteSpace(layer_name) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      layer_to_rename.Name = layer_name
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> layer_to_rename.CommitChanges() <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> rename():
    layerName = rs.GetString(<span class="highlight-literal">"Name of layer to rename"</span>)

    matchingLayers = [layer <span class="highlight-keyword">for</span> layer <span class="highlight-keyword">in</span> doc.Layers <span class="highlight-keyword">if</span> layer.Name == layerName]

    layerToRename = None
    <span class="highlight-keyword">if</span> len(matchingLayers) == <span class="highlight-number">0</span>:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Layer \"{0}\" does not exist."</span>.format(layerName)
        <span class="highlight-keyword">return</span>
    <span class="highlight-keyword">if</span> len(matchingLayers) == <span class="highlight-number">1</span>:
        layerToRename = matchingLayers[<span class="highlight-number">0</span>]
    <span class="highlight-keyword">elif</span> len(matchingLayers) &gt; <span class="highlight-number">1</span>:
        i = <span class="highlight-number">0</span>;
        <span class="highlight-keyword">for</span> layer <span class="highlight-keyword">in</span> matchingLayers:
            <span class="highlight-keyword">print</span> <span class="highlight-literal">"({0}) {1}"</span>.format(
                i<span class="highlight-number">+1</span>, matchingLayers[i].FullPath.replace(<span class="highlight-literal">"::"</span>, <span class="highlight-literal">"-&gt;"</span>))
            i += <span class="highlight-number">1</span>

        selectedLayer = rs.GetInteger(
            <span class="highlight-literal">"which layer?"</span>, <span class="highlight-number">-1</span>, <span class="highlight-number">1</span>, len(matchingLayers))
        <span class="highlight-keyword">if</span> selectedLayer == None:
            <span class="highlight-keyword">return</span>
        layerToRename = matchingLayers[selectedLayer - <span class="highlight-number">1</span>]

    layerName = rs.GetString(<span class="highlight-literal">"New layer name"</span>)
    layerToRename.Name = layerName
    layerToRename.CommitChanges()
    <span class="highlight-keyword">return</span>

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
    rename()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="CFDD37CD.htm">Layer Class</a></div><div class="seeAlsoStyle"><a href="ABAF2FCC.htm">Rhino.DocObjects Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 4 October 2015 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>