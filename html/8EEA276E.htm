<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Line.PointAt Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="PointAt method" /><meta name="System.Keywords" content="Line.PointAt method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Line.PointAt" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Line.PointAt(System.Double)" /><meta name="Description" content="Evaluates the line at the specified parameter." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="8EEA276E" /><meta name="guid" content="8EEA276E" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="A7FBC69C.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="2043CFA.htm" title="Rhino.Geometry" tocid="2043CFA">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="F0EB2028.htm" title="Line Structure" tocid="F0EB2028">Line Structure</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="BC592A10.htm" title="Line Methods" tocid="BC592A10">Line Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="79297B03.htm" title="ClosestParameter Method " tocid="79297B03">ClosestParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="5A38B618.htm" title="ClosestPoint Method " tocid="5A38B618">ClosestPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="FB548CA3.htm" title="DistanceTo Method " tocid="FB548CA3">DistanceTo Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="BAB89F9A.htm" title="EpsilonEquals Method " tocid="BAB89F9A">EpsilonEquals Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3CA9DCF5.htm" title="Equals Method " tocid="3CA9DCF5">Equals Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="20D41C61.htm" title="Extend Method " tocid="20D41C61">Extend Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="EBF58D22.htm" title="ExtendThroughBox Method " tocid="EBF58D22">ExtendThroughBox Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7E1591D8.htm" title="Flip Method " tocid="7E1591D8">Flip Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="666259F4.htm" title="GetHashCode Method " tocid="666259F4">GetHashCode Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="EE1E57D0.htm" title="MaximumDistanceTo Method " tocid="EE1E57D0">MaximumDistanceTo Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="91D4998A.htm" title="MinimumDistanceTo Method " tocid="91D4998A">MinimumDistanceTo Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="8EEA276E.htm" title="PointAt Method " tocid="8EEA276E">PointAt Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="1AE35AB3.htm" title="ToNurbsCurve Method " tocid="1AE35AB3">ToNurbsCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6E48C11.htm" title="ToString Method " tocid="6E48C11">ToString Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="CA18F5F3.htm" title="Transform Method " tocid="CA18F5F3">Transform Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="365B28F8.htm" title="TryCreateBetweenCurves Method " tocid="365B28F8">TryCreateBetweenCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="57AE85A9.htm" title="TryFitLineToPoints Method " tocid="57AE85A9">TryFitLineToPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="C92D2D8E.htm" title="TryGetPlane Method " tocid="C92D2D8E">TryGetPlane Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Line<span id="LST81C7FE25_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST81C7FE25_0?cpp=::|nu=.");</script>PointAt Method </td></tr></table><span class="introStyle">Rhino for Mac 5.1</span><div class="summary">
            Evaluates the line at the specified parameter.
            </div><p> </p><strong>Namespace:</strong> <a href="2043CFA.htm">Rhino.Geometry</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.50000.0 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">Point3d</span> <span class="identifier">PointAt</span>(
	<span class="identifier">double</span> <span class="parameter">t</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">PointAt</span> ( 
	<span class="parameter">t</span> <span class="keyword">As</span> <span class="identifier">Double</span>
) <span class="keyword">As</span> <span class="identifier">Point3d</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">t</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">System<span id="LST81C7FE25_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST81C7FE25_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><br />Parameter to evaluate line segment at. Line parameters are normalised parameters.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="68F1A42D.htm">Point3d</a><br />The point at the specified parameter.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino.Geometry;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result IntersectLines(Rhino.RhinoDoc doc)
  {
    Rhino.Input.Custom.GetObject go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt( <span class="highlight-literal">"Select lines"</span> );
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;
    go.GetMultiple( <span class="highlight-number">2</span>, <span class="highlight-number">2</span>);
    <span class="highlight-keyword">if</span>( go.CommandResult() != Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> go.CommandResult();
    <span class="highlight-keyword">if</span>( go.ObjectCount != <span class="highlight-number">2</span> )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    LineCurve crv0 = go.Object(<span class="highlight-number">0</span>).Geometry() <span class="highlight-keyword">as</span> LineCurve;
    LineCurve crv1 = go.Object(<span class="highlight-number">1</span>).Geometry() <span class="highlight-keyword">as</span> LineCurve;
    <span class="highlight-keyword">if</span>( crv0==<span class="highlight-keyword">null</span> || crv1==<span class="highlight-keyword">null</span> )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    Line line0 = crv0.Line;
    Line line1 = crv1.Line;
    Vector3d v0 = line0.Direction;
    v0.Unitize();
    Vector3d v1 = line1.Direction;
    v1.Unitize();

    <span class="highlight-keyword">if</span>( v0.IsParallelTo(v1) != <span class="highlight-number">0</span> )
    {
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Selected lines are parallel."</span>);
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    }

    <span class="highlight-keyword">double</span> a, b;
    <span class="highlight-keyword">if</span>( !Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1, <span class="highlight-keyword">out</span> a, <span class="highlight-keyword">out</span> b))
    {
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"No intersection found."</span>);
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    }

    Point3d pt0 = line0.PointAt(a);
    Point3d pt1 = line1.PointAt(b);
    <span class="highlight-comment">// pt0 and pt1 should be equal, so we will only add pt0 to the document</span>
    doc.Objects.AddPoint( pt0 );
    doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino.Geometry

<span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> IntersectLines(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> go <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select lines"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GetMultiple(<span class="highlight-number">2</span>, <span class="highlight-number">2</span>)
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">If</span> go.ObjectCount &lt;&gt; <span class="highlight-number">2</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> crv0 <span class="highlight-keyword">As</span> LineCurve = <span class="highlight-keyword">TryCast</span>(go.<span class="highlight-keyword">Object</span>(<span class="highlight-number">0</span>).Geometry(), LineCurve)
    <span class="highlight-keyword">Dim</span> crv1 <span class="highlight-keyword">As</span> LineCurve = <span class="highlight-keyword">TryCast</span>(go.<span class="highlight-keyword">Object</span>(<span class="highlight-number">1</span>).Geometry(), LineCurve)
    <span class="highlight-keyword">If</span> crv0 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> crv1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> line0 <span class="highlight-keyword">As</span> Line = crv0.Line
    <span class="highlight-keyword">Dim</span> line1 <span class="highlight-keyword">As</span> Line = crv1.Line
    <span class="highlight-keyword">Dim</span> v0 <span class="highlight-keyword">As</span> Vector3d = line0.Direction
    v0.Unitize()
    <span class="highlight-keyword">Dim</span> v1 <span class="highlight-keyword">As</span> Vector3d = line1.Direction
    v1.Unitize()

    <span class="highlight-keyword">If</span> v0.IsParallelTo(v1) &lt;&gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Selected lines are parallel."</span>)
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.[<span class="highlight-keyword">Nothing</span>]
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> a <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, b <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1, a, b) <span class="highlight-keyword">Then</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"No intersection found."</span>)
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.[<span class="highlight-keyword">Nothing</span>]
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> pt0 <span class="highlight-keyword">As</span> Point3d = line0.PointAt(a)
    <span class="highlight-keyword">Dim</span> pt1 <span class="highlight-keyword">As</span> Point3d = line1.PointAt(b)
    <span class="highlight-comment">' pt0 and pt1 should be equal, so we will only add pt0 to the document</span>
    doc.Objects.AddPoint(pt0)
    doc.Views.Redraw()
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> IntersectLines():
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt( <span class="highlight-literal">"Select lines"</span> )
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GetMultiple( <span class="highlight-number">2</span>, <span class="highlight-number">2</span>)
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success:
      <span class="highlight-keyword">return</span> go.CommandResult()
    <span class="highlight-keyword">if</span> go.ObjectCount!=<span class="highlight-number">2</span>: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    crv0 = go.Object(<span class="highlight-number">0</span>).Geometry()
    crv1 = go.Object(<span class="highlight-number">1</span>).Geometry()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> crv0 <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> crv1: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    line0 = crv0.Line
    line1 = crv1.Line
    v0 = line0.Direction
    v0.Unitize()
    v1 = line1.Direction
    v1.Unitize()

    <span class="highlight-keyword">if</span> v0.IsParallelTo(v1)!=<span class="highlight-number">0</span>:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Selected lines are parallel."</span>
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing

    rc, a, b = Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1)
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> rc:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"No intersection found."</span>
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing

    pt0 = line0.PointAt(a)
    pt1 = line1.PointAt(b)
    <span class="highlight-comment"># pt0 and pt1 should be equal, so we will only add pt0 to the document</span>
    scriptcontext.doc.Objects.AddPoint(pt0)
    scriptcontext.doc.Views.Redraw()
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    IntersectLines()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="F0EB2028.htm">Line Structure</a></div><div class="seeAlsoStyle"><a href="2043CFA.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 4 October 2015 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>